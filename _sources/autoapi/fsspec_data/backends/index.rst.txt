fsspec_data.backends
====================

.. py:module:: fsspec_data.backends


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/fsspec_data/backends/base/index
   /autoapi/fsspec_data/backends/http/index
   /autoapi/fsspec_data/backends/sqlalchemy/index


Classes
-------

.. autoapisummary::

   fsspec_data.backends.HTTPFilesystem
   fsspec_data.backends.SQLAlchemyFilesystem


Package Contents
----------------

.. py:class:: HTTPFilesystem(*args, **storage_options)

   Bases: :py:obj:`fsspec_data.backends.base.BaseFileSystem`


   Docs: https://filesystem-spec.readthedocs.io/en/latest/developer.html#implementing-a-backend
   Minimal: https://github.com/fsspec/filesystem_spec/blob/45dcfa99e2dc320bf072c28bef767b71f8299a4a/fsspec/implementations/github.py#L10

   Create and configure file-system instance

   Instances may be cachable, so if similar enough arguments are seen
   a new instance is not required. The token attribute exists to allow
   implementations to cache instances if they wish.

   A reasonable default should be provided if there are no arguments.

   Subclasses should call this method.

   :param use_listings_cache: passed to ``DirCache``, if the implementation supports
                              directory listing caching. Pass use_listings_cache=False
                              to disable such caching.
   :param listings_expiry_time: passed to ``DirCache``, if the implementation supports
                                directory listing caching. Pass use_listings_cache=False
                                to disable such caching.
   :param max_paths: passed to ``DirCache``, if the implementation supports
                     directory listing caching. Pass use_listings_cache=False
                     to disable such caching.
   :param skip_instance_cache: If this is a cachable implementation, pass True here to force
                               creating a new instance even if a matching instance exists, and prevent
                               storing this instance.
   :type skip_instance_cache: bool
   :param asynchronous:
   :type asynchronous: bool
   :param loop:
   :type loop: asyncio-compatible IOLoop or None


.. py:class:: SQLAlchemyFilesystem(*args, **storage_options)

   Bases: :py:obj:`fsspec_data.backends.base.BaseFileSystem`


   Docs: https://filesystem-spec.readthedocs.io/en/latest/developer.html#implementing-a-backend
   Minimal: https://github.com/fsspec/filesystem_spec/blob/45dcfa99e2dc320bf072c28bef767b71f8299a4a/fsspec/implementations/github.py#L10

   Create and configure file-system instance

   Instances may be cachable, so if similar enough arguments are seen
   a new instance is not required. The token attribute exists to allow
   implementations to cache instances if they wish.

   A reasonable default should be provided if there are no arguments.

   Subclasses should call this method.

   :param use_listings_cache: passed to ``DirCache``, if the implementation supports
                              directory listing caching. Pass use_listings_cache=False
                              to disable such caching.
   :param listings_expiry_time: passed to ``DirCache``, if the implementation supports
                                directory listing caching. Pass use_listings_cache=False
                                to disable such caching.
   :param max_paths: passed to ``DirCache``, if the implementation supports
                     directory listing caching. Pass use_listings_cache=False
                     to disable such caching.
   :param skip_instance_cache: If this is a cachable implementation, pass True here to force
                               creating a new instance even if a matching instance exists, and prevent
                               storing this instance.
   :type skip_instance_cache: bool
   :param asynchronous:
   :type asynchronous: bool
   :param loop:
   :type loop: asyncio-compatible IOLoop or None


